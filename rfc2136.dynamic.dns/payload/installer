#!/usr/bin/env bash
# LDC Router configuration with RFC2136 support
VERSION="v3.1"

# Uncomment for debugging or syntax checking
# Syntax check - uncomment for non execution dry run:
# set -n
# source ./bash_debug_function.sh
# s_dbg on verbose
# DEBUG=Yes

# Make sure script runs as admin
if [[ ${EUID} == 0 ]]
then
  echo "This script must be run as the admin user - not root or sudo!"
  exit 1
fi

# Set up the Vyatta environment
source /opt/vyatta/etc/functions/script-template
OPRUN=/opt/vyatta/bin/vyatta-op-cmd-wrapper
CFGRUN=/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper
API=/bin/cli-shell-api
shopt -s expand_aliases

alias AddImage='${OPRUN} add system image'
alias begin='${CFGRUN} begin'
alias cleanup='${CFGRUN} cleanup'
alias comment='${CFGRUN} comment'
alias commit='${CFGRUN} commit'
alias copy='${CFGRUN} copy'
alias delete='${CFGRUN} delete'
alias DeleteImage='/usr/bin/ubnt-upgrade --delete-noprompt'
alias discard='${CFGRUN} discard'
alias end='${CFGRUN} end'
alias load='${CFGRUN} load'
alias rename='${CFGRUN} rename'
alias save='sudo ${CFGRUN} save'
alias set='${CFGRUN} set'
alias show='${API} showConfig'
alias showddns=/opt/vyatta/bin/sudo-users/vyatta-op-dynamic-dns.pl
alias version='${OPRUN} show version'

alias bold='tput bold'
alias normal='tput sgr0'
alias reverse='tput smso'
alias underline='tput smul'

alias black='tput setaf 0'
alias blink='tput blink'
alias blue='tput setaf 4'
alias cyan='tput setaf 6'
alias green='tput setaf 2'
alias lime='tput setaf 190'
alias magenta='tput setaf 5'
alias powder='tput setaf 153'
alias purple='tput setaf 171'
alias red='tput setaf 1'
alias tan='tput setaf 3'
alias white='tput setaf 7'
alias yellow='tput setaf 3'
alias ansi='sed -r "s/\[(.[^]]*)\]/\[$(cyan)\1$(normal)\]/g"'

SHOWVER=$(version | sed 's/$/;/g')
BUILD=$(echo ${SHOWVER} | awk 'BEGIN {RS=";"} /Build ID:/ {print $3}')
VER=$(echo ${SHOWVER} | awk 'BEGIN {RS=";"} /Version:/ {print $2}')
HNAME=$(hostname -s)
ME="${0##*/} ${VERSION}: "
PKGs="libjson-any-perl dnsutils curl rfc2136.dynamic.dns" # Add packages needed separated by a space
WANIF=$(ip route get 8.8.8.8 | awk -F"dev " 'NR==1 {split($2,a," ");print a[1]}') # Find out if we have a connected Internet accessible WAN interface
APTPATH="/etc/apt"
APTSRCLST="sources.list"
BASE_DIR="/config"
TARGET="${BASE_DIR}/user-data/KH_Source"
ERROR=0

# Setup the echo_logger function
echo_logger ()
{
local MSG=

  shopt -s checkwinsize
  COLUMNS=$(tput cols)

  case "${1}" in
    E)
      shift
      MSG="[$(red)$(bold)ERROR$(normal)]: ${@}"
      LOG="[ERROR]: ${@}";;
    F)
      shift
      MSG="[$(red)$(bold)FAILED$(normal)]: ${@}"
      LOG="[FAILED]: ${@}";;
    FE)
      shift
      MSG="[$(red)$(bold)FATAL ERROR$(normal)]: ${@}"
      LOG="[FATAL]: ${@}";;
    I)
      shift
      MSG="[$(blue)$(bold)INFO$(normal)]: ${@}"
      LOG="[INFO]: ${@}";;
    S)
      shift
      MSG="[$(green)$(bold)OK$(normal)]: ${@}"
      LOG="[OK]: ${@}";;
    T)
      shift
      MSG="[$(tan)$(bold)TRYING$(normal)]: ${@}"
      LOG="[TRYING]: ${@}";;
    W)
      shift
      MSG="[$(yellow)$(bold)WARNING$(normal)]: ${@}"
      LOG="[WARNING]: ${@}";;
    *)
      echo "ERROR: usage: echo_logger MSG TYPE(E, F, FE, I, S, T, W) MSG."
      exit 1;;
  esac

  MSG=$(echo ${MSG} | fold -s -w ${COLUMNS})
  echo "$(echo ${MSG} | ansi)"
  logger -t ${ME} "${LOG}"
}

# Function to output command status of success or failure to screen and log
try ()
{
  [[ ${DEBUG} ]] && echo_logger T "[${@}]..."
  if eval ${@}
  then
    echo_logger                 S "[${@}]."
    return 0
  else
    echo_logger                 E "[${@}] unsuccessful!"
    return 1
  fi
}

# Usage: yesno prompt...
yesno ()
{
default=

  if [[ "${1}" = "-y" ]]
  then
    default='y'
    shift
  elif [[ "${1}" = "-n" ]]
  then
    default='n'
    shift
  fi

  if [[ ${#} = 0 ]]
  then
    prompt="[Y/n]: "
  else
    prompt="${@}"
  fi

  while true
  do
    read -p "${prompt}" || exit 1
    if [[ -z "${REPLY}" && ! -z "${default}" ]]
    then
      REPLY=$default
    fi
    case "${REPLY}" in
      y*|Y*)  return 0;;
      n*|N*)  return 1;;
          *)  echo "Answer (y)es or (n)o please";;
    esac
  done
}

# Print a line of repeating characters across the current screen width
print_line ()
{
  printf "\n"
  eval printf %.0s${1:-\-} '{1..'"${2:-$(tput cols)}"\}
  printf "\n\n"
}

Internet ()
{
  if sudo curl -D- -o /dev/null -s http://www.google.com 2>&1> /dev/null
  then
    return 0
  else
    return 1
  fi
}

# Check version and set up environment
Check_Version ()
{
  # v1.2.0: build 4574253
  # v1.4.1: build 4648309
  # v1.5.0: build 4677648
  # v1.6.0: build 4716006
  # v1.7.0: build 4783374
  # v1.8.0: build 4853089
  # v1.8.5: build 4884695
  # v1.9.0: build 4901118
  # v1.9.1: build 4939093

  if [[ ${BUILD} > 4783374 ]]   # Script is tested on builds > OS v1.7.1-v1.9.1
  then
    return 1
  elif [[ ${BUILD} < 4783374 ]] # OS must be upgraded
  then
    return 2
  else
    return 0
  fi
}

Init_eth1_Firewall ()
{
ERROR=0

  # Configure router firewall and connect eth1 to the ISP
  print_line \*
  echo_logger I "Opening EdgeOS configuration session..."
  try begin
  echo_logger I "Setting up the firewall..."
  try set firewall all-ping enable
  try set firewall broadcast-ping disable
  try set firewall group network-group localnets network 192.168.1.0/24
  try set firewall group network-group localnets network 10.0.0.0/8
  try set firewall ipv6-receive-redirects disable
  try set firewall ipv6-src-route disable
  try set firewall ip-src-route disable
  try set firewall log-martians enable
  try set firewall name WAN_IN default-action drop
  try set firewall name WAN_IN description 'WAN to internal'
  try set firewall name WAN_IN rule 1 action accept
  try set firewall name WAN_IN rule 1 state established enable
  try set firewall name WAN_IN rule 1 state related enable
  try set firewall name WAN_IN rule 3 action drop
  try set firewall name WAN_IN rule 3 state invalid enable
  try set firewall name WAN_LOCAL default-action drop
  try set firewall name WAN_LOCAL description 'WAN to router'
  try set firewall name WAN_LOCAL rule 1 action accept
  try set firewall name WAN_LOCAL rule 1 log disable
  try set firewall name WAN_LOCAL rule 1 state established enable
  try set firewall name WAN_LOCAL rule 1 state invalid disable
  try set firewall name WAN_LOCAL rule 1 state new disable
  try set firewall name WAN_LOCAL rule 1 state related enable
  try set firewall name WAN_LOCAL rule 3 action drop
  try set firewall name WAN_LOCAL rule 3 state invalid enable
  try set firewall receive-redirects disable
  try set firewall send-redirects enable
  try set firewall source-validation disable
  try set firewall syn-cookies enable
  echo_logger I "Initializing Internet facing ethernet interface..."
  try set interfaces ethernet eth1 address dhcp
  try set interfaces ethernet eth1 description Internet
  try set interfaces ethernet eth1 dhcp-options default-route update
  try set interfaces ethernet eth1 dhcp-options default-route-distance 210
  try set interfaces ethernet eth1 dhcp-options name-server update
  try set interfaces ethernet eth1 duplex auto
  try set interfaces ethernet eth1 firewall in name WAN_IN
  try set interfaces ethernet eth1 firewall local name WAN_LOCAL
  try set interfaces ethernet eth1 speed auto
  try set interfaces loopback lo
  try commit
  try save
  try end

  return ${ERROR}
}

# Upgrade the router with the latest compatible firmware
Upgrade_Router ()
{
GetImageCount=$(${OPRUN} show system image | grep -e "^v" | wc -l)
  IMAGE='v1.9.0/ER-e100.v1.9.0.4901118.tar'
  FW_VER='v1.9.0'
  print_line \*
  echo_logger W "EdgeOS version [${VER}] must be upgraded to [v1.7.0]!"
  if [[ ! -f /config/user-data/$IMAGE ]]
  then
    echo_logger I "Downloading EdgeOS version [$FW_VER]..."
    if try curl -f --progress-bar -o /config/user-data/$IMAGE  "https://dl.ubnt.com/firmwares/edgemax/v1.9.0/ER-e100.v1.9.0.4901118.tar"
    then
      echo_logger S "EdgeOS [$FW_VER] firmware downloaded."
    else
      echo_logger E "EdgeOS [$FW_VER] firmware not downloaded."
      return 1
    fi
  else
    echo_logger I "EdgeOS version [$FW_VER] already downloaded..."
  fi

  if [[ ${GetImageCount} -gt 1 ]]
  then
    echo_logger I "Making room for the new upgrade image..."
    try DeleteImage || return 1
  fi

  try AddImage /config/user-data/$IMAGE || return 1

  return 0
}

# Make sure we clean up session on deliberate and accidental exits
atexit ()
{
  end
  print_line \*
}

# Function to load the KH boot configuration file from the selfextract directory
Load_Local_Boot ()
{
  print_line \*
  echo_logger I "Loading [config.kh.boot]..."
  try begin
  if load $(pwd)/config.kh.boot
  then
    echo_logger S "[config.kh.boot] loaded, committing configuration."
    try commit
    try save
    try end
    return ${ERROR}
  else
    echo_logger F "Unable to load [config.kh.boot], saving it to [/tmp/config.kh.boot]..."
    try sudo cp -f config.kh.boot /tmp/config.kh.boot || echo_logger E "Unable to copy [config.kh.boot] to [/tmp/config.kh.boot] - manual intervention required."
    echo "Manually install it using:[configure <ENTER> load /tmp/config.kh.boot; commit; save; exit]."
    echo_logger E "Exiting function; check [/var/log/messages]!"
    try end
    echo
    return 1
  fi
}

# Function to load your own configuration boot file
Load_Your_Own ()
{
  if yesno -y "Load and commit [${BOOTFILE}]? [Y/n]: "
  then
    print_line \*
    echo_logger I "Loading [${BOOTFILE}]..."
    try begin
    if load ${BOOTFILE}
    then
      echo_logger S "[${BOOTFILE}] loaded, committing configuration..."
      try commit || echo_logger F "[${BOOTFILE}] unable to commit configuration!"
      try save || echo_logger F "Unable to save configuration!"
      try end
      return 0
    else
      echo_logger F "Unable to load [${BOOTFILE}]."
      echo_logger I "Manually install it using: configure; load [${BOOTFILE}]; commit; save"
      echo
      echo_logger E "Exiting function; check [/var/log/messages]!"
      try end
      return 1
    fi
  else
    return 0
  fi
}

# Let's check to see if this is a factory default router and attempt to rectify, so we can keep going
Check_If_Factory ()
{
local CONFIG=/config/config.boot
local DEFAULT_CONFIG=/opt/vyatta/etc/config.boot.default-$(/usr/sbin/ubnt-hal-e getBoardIdE)
local CONFIG_MD5=$(md5sum ${CONFIG} | awk -F ' ' '{print $1}')
local DEFAULT_CONFIG_MD5=$(md5sum ${DEFAULT_CONFIG} | awk -F ' ' '{print $1}')

  if [[ ${CONFIG_MD5} = ${DEFAULT_CONFIG_MD5} || ! $(grep tsd /etc/passwd) || ! $(grep 'firewall {' /config/config.boot) || ! $(grep 'firewall {' /config/config.boot) || ! $(grep 'shared-network-name Wifi-LAN {' /config/config.boot) ]]
  then
    return 0
  fi

  return 1
}

Install_Config ()
{
local CONFIG=/config/config.boot
local DEFAULT_CONFIG=/opt/vyatta/etc/config.boot.default-$(/usr/sbin/ubnt-hal-e getBoardIdE)
local OPTIONS="KH boot config.,Other boot config.,Continue,Quit"
local IFS=','
local COLS=20
local PS3="Enter option number and hit return => "
BOOTFILE="z"

  print_line \*
  echo
  echo_logger I "We need to install a customized configuration."
  echo
  printf "Please select one of the following options: \n"
  while true; do
    select CHOICE in ${OPTIONS}; do
      case ${REPLY} in
        1)
          if yesno -y  "Load and commit [config.kh.boot]? [Y/n]: "
          then
            if Load_Local_Boot
            then
              echo_logger S "[config.kh.boot] loaded."
              REPLY=3
              return 1
            else
              echo "Select a different option for recovery or hit 4 + Enter to Quit."
            fi
          fi
          REPLY=
          ;;
        2)
          if yesno -y  "Load your own boot configuration file? [Y/n]: "
          then
            while true; do
              read -p "Enter a valid boot configuration file to load or type QUIT: " BOOTFILE
              case ${BOOTFILE} in
                QUIT*|quit*)
                  break
                  ;;
                *)
                  if [[ -f "${BOOTFILE}" ]]
                  then
                    if Load_Your_Own
                    then
                      echo_logger S "[${BOOTFILE}] loaded."
                      return 1
                    fi
                  else
                    echo_logger E "[$BOOTFILE] doesn't exist, please try again or type QUIT."
                  fi
                  ;;
              esac
            done
          else
            echo "Select a different option or hit 4 + Enter to Quit."
          fi
          REPLY=
          ;;
        3)
          return 0
          ;;
        4)
          if yesno -y  "You have chosen Quit, is that correct? [Y/n]: "
          then
            exit 0
          else
            REPLY=
            echo "Select a different option for setup or recovery or hit 4 + Enter to Quit."
          fi
          ;;
        *)
          echo_logger E "Enter option 1, 2, 3 or 4 + Enter\n";;
      esac
    done
  done
}

# User directory ownership is often clobbered after loading a config.boot,
# preventing ssh public key login. We need to fix the ownership of the /home/*
Fix_Users ()
{
  for USER in tsd ubnt
  do
    if [[ -d /home/${USER} && ! $(stat -c %U /home/${USER}) = ${USER} ]]
    then
      if [[ $(grep ${USER} /etc/passwd) ]]
      then
        try chown -R ${USER} /home/${USER}
      else
        try rm -rf /home/${USER} # Remove the orphaned /home/${USER} directory
      fi
    fi
  done
}

# This is the function that adds the rfc2136 DDNS configuration
Add_RFC2136_Config ()
{
ERROR=0

  # Rather than check to see what is already configured (or not) we should just try to set the script's validated configuration
  print_line \*
  echo_logger I "Updating router configuration with rfc2136 dynamic DNS support..."
  try begin # Open an EdgeOS CLI session
  try set system time-zone America/Los_Angeles
  echo_logger I "Removing existing rfc2136 dynamic DNS support..."
  try delete service dns dynamic
  try set service dns dynamic interface ${WANIF} rfc2136 ${HNAME} key /config/auth/keys/${HNAME}.private
  try set service dns dynamic interface ${WANIF} rfc2136 ${HNAME} record ${HNAME}.kh.orbc2.org
  try set service dns dynamic interface ${WANIF} rfc2136 ${HNAME} server ns.kh.orbc2.org
  try set service dns dynamic interface ${WANIF} rfc2136 ${HNAME} ttl 3600
  try set service dns dynamic interface ${WANIF} rfc2136 ${HNAME} zone kh.orbc2.org
  try commit
  try save
  try end

  return ${ERROR}
}

Add_HW_Offload ()
{
ERROR=0

  # Add the new hardware ipsec & ipv4 offload options - might as well set them all, since the router will only use what it needs
  print_line \*
  echo_logger I "Updating router configuration with hardware offloading"
  try begin # Open an EdgeOS CLI session
  try set system offload ipsec enable
  try set system offload ipv4 forwarding enable
  try set system offload ipv4 gre enable
  try set system offload ipv4 pppoe enable
  try set system offload ipv4 vlan enable

  print_line \*

  echo_logger I "Disable DPI traffic analysis"
  try set system traffic-analysis dpi disable
  try set system traffic-analysis export disable
  try commit
  try save
  try end

  return ${ERROR}
}

# EdgeOS v1.2.0 didn't have Port-Forward for the Alarm, let's ensure it is added to the upgrade
Add_Port_Forward ()
{
ERROR=0

  print_line \*
  echo_logger I "Updating router configuration with [port-forward] for the Alarm System TL250..."
  try begin # Open an EdgeOS CLI session
  try set port-forward auto-firewall enable
  try set port-forward hairpin-nat enable
  try set port-forward lan-interface eth0
  try set port-forward rule 1 forward-to address 192.168.1.30
  try set port-forward rule 1 original-port 3062
  try set port-forward rule 1 protocol tcp
  try set port-forward rule 1 description '"'Alarm System TL250'"'
  try set port-forward wan-interface eth1
  try commit
  try save
  try end

  return ${ERROR}
}

# EdgeOS v1.2.0 didn't have this option, add it
Add_DHCP_Host_Disable ()
{
ERROR=0

  print_line \*
  echo_logger I "Updating router configuration with [set service dhcp-server hostfile-update disable]..."
  try begin # Open an EdgeOS CLI session
  try set service dhcp-server hostfile-update disable
  try commit
  try save
  try end

  return ${ERROR}
}

# Install the rfc2136.dynamic.dns templates in /opt/vyatta/share/vyatta-cfg/templates
Install_RFC2136_Support ()
{
CWD=$(pwd)
BASE="${CWD}/rfc2136.dynamic.dns"
DCLN="usr/sbin/ddclient"
VDIR="opt/vyatta/sbin"
VSCR="vyatta-dynamic-dns.pl"
VCFG="opt/vyatta/share/vyatta-cfg/templates"
TLVL="service/dns"
local i=0
ERROR=0

  print_line \*
  echo_logger I "Patching EdgeOS [${VER}] with RFC2136 DDNS support..."
  try sudo install -o root -g root -m 0755 "${BASE}/${DCLN} /${DCLN}"
  try sudo install -o root -g root -m 0755 "${BASE}/${VDIR}/${VSCR}" "/${VDIR}"
  try sudo cp -rf "${BASE}/${VCFG}/${TLVL}/dynamic/ /${VCFG}/${TLVL}"
  try sudo chown -R root:root "/${VCFG}/${TLVL}"

  return ${ERROR}
}

# Check to see if the rfc2136 templates have been installed
Check_RFC2136_Template ()
{
  if [[ -d /opt/vyatta/share/vyatta-cfg/templates/service/dns/dynamic/interface/node.tag/rfc2136/ ]]
  then
    return 0
  else
    return 1
  fi
}

#update apt repository
apt_get_Update ()
{
local i=1
ERROR=1

  print_line \*
  echo_logger I "Updating Debian package repository."
  # apt-get upgrades sometimes suffer from transient errors caused by main server updates, so retry 3 times with 10s sleep

  while [ ${i} -lt 3 ]; do
    ((i++))
    if try sudo apt-get -qq update
    then
      i=3
      ERROR=0
      echo_logger I "Debian package repository update complete."
    else
      sleep 10
    fi
  done
  # Exit status may still be bad, so advise
  if [[ ${ERROR} = 1 ]]
  then
    echo_logger FE "Problem updating package repository online (check connectivity), please run script again in 5 minutes."
    exit 1
  fi
}

# Make sure required packages, RFC 2136 keys and DDNS configuration are maintained across upgrades
Set_Persistence ()
{
CWD=$(pwd)
DEBUG_SH="bash_debug_function.sh"
INSTALLER=installer
KH_CONFIG_BOOT="config.kh.boot"
POST_CFG_DIR="${BASE_DIR}/scripts/post-config.d"
POST_CFG_SCRIPT="KH_Install_Packages.sh"
PUB_KEY="tsd_rsa.pub"
RFC2136_VY_CFG="rfc2136.dynamic.dns"
RM_RFC2136="Remove_RFC2136.sh"
ERROR=0

  print_line \*
  echo_logger I "Setting up router EdgeOS upgrade persistence..."
  if [[ ! -d "${POST_CFG_DIR}" ]]
  then
    try sudo install -d -o root -g root -m 0755 "${POST_CFG_DIR}/"
  fi

  if [[ ! -d "${TARGET}" ]]
  then
    try sudo install -d -o root -g root -m 0755 "${TARGET}"
  fi

  try sudo cp -rf  "${CWD}/${RFC2136_VY_CFG}" "${TARGET}/"
  try sudo install -o root -g root -m 0755 "${APTPATH}/${APTSRCLST}" "${TARGET}/${APTSRCLST}"
  try sudo install -o root -g root -m 0755 "${CWD}/${DEBUG_SH}" "${TARGET}/${DEBUG_SH}"
  try sudo install -o root -g root -m 0755 "${CWD}/${INSTALLER}" "${TARGET}/${INSTALLER}"
  try sudo install -o root -g root -m 0755 "${CWD}/${KH_CONFIG_BOOT}" "${TARGET}/${KH_CONFIG_BOOT}"
  try sudo install -o root -g root -m 0755 "${CWD}/${POST_CFG_SCRIPT}" "${POST_CFG_DIR}/${POST_CFG_SCRIPT}"
  try sudo install -o root -g root -m 0755 "${CWD}/${PUB_KEY}" "${TARGET}/${PUB_KEY}"
  try sudo install -o root -g root -m 0755 "${CWD}/${RM_RFC2136}" "${TARGET}/${RM_RFC2136}"

  return ${ERROR}
}

# Add packages routine, note that the rfc2136.dynamic.dns isn't a real package, so we handle it differently
Add_Pkgs ()
{
DNSver="1:9.8.4.dfsg.P1-6+nmu2+deb7u6" # dnsutils package version that works correctly with ddclient 3.8.3
GETDNSver=$(version added | awk -F ' ' '/dnsutils/ {print $3}') # Find the installed dnsutils package version
PATCHDIR=$(pwd)
PKG=''

  #make sure my_packages directory exists
  if [[ ! -d "/var/lib/my_packages" ]]
  then
    echo_logger I "Creating [/var/lib/my_packages]..."
    if ! try sudo install -d -o root -g root -m 0755 /var/lib/my_packages
    then
      echo_logger W "Unable to create [/var/lib/my_packages], attempting to repair..."
      echo_logger I "Removing [/var/lib/my_packages]..."
      if try rm -rf /var/lib/my_packages
      then
        echo_logger I "Automatic repair: creating [/var/lib/my_packages]"
        if ! try sudo install -d -o root -g root -m 0755 /var/lib/my_packages
        then
          echo_logger W "Unable to create [/var/lib/my_packages]!"
        else
          echo_logger I "Directory [/var/lib/my_packages] created"
        fi
        echo_logger I "Automatic repair of [/var/lib/my_packages] complete."
      fi
    fi
  fi

  print_line \*
  if [[ -f "/var/lib/my_packages/debian.wheezy.repo" && $(grep wheezy ${APTPATH}/${APTSRCLST} 2>&1 /dev/null) ]]
  then
    echo_logger I "Debian Wheezy [${APTPATH}/${APTSRCLST}] is up to date."
  else
    echo_logger I "Adding debian repositories to [${APTPATH}/${APTSRCLST}]."
    # v1.6.0 and above use wheezy
    try begin
    if (grep squeeze ${APTPATH}/${APTSRCLST} 2>&1 /dev/null)
    then
      echo_logger I "EdgeOS [${VER}] firmware uses Debian [wheezy], deleting [squeeze] repository configuration..."
      try delete system package repository
    fi
    echo_logger I "This firmware uses Debian [wheezy], updating repository configuration..."
    try delete system package repository # clean out any references to Debian security updates as MIPS64 Wheezy no longer supported
    try set system package repository wheezy components 'main contrib non-free'
    try set system package repository wheezy distribution wheezy
    try set system package repository wheezy password ''
    try set system package repository wheezy url 'http://ftp.debian.org/debian/'
    try set system package repository wheezy username ''
    try set system package repository wheezy-backports components main
    try set system package repository wheezy-backports distribution wheezy-backports
    try set system package repository wheezy-backports password ''
    try set system package repository wheezy-backports url 'http://ftp.debian.org/debian/```'
    try set system package repository wheezy-backports username ''
    try commit
    try save
    try end

    [ -f /var/lib/my_packages/debian.wheezy.repo ] || \
    try sudo touch /var/lib/my_packages/debian.wheezy.repo
  fi

  # Set up packages to install
  # Iterate through dependencies and add any unavailable ones to install list
  for i in ${PKGs}; do
    case ${i} in
      "libjson-any-perl")
        if [[ ! -f "/usr/share/perl5/JSON/Any.pm" ]]
        then
          PKG="${PKG} ${i}"
          echo_logger I "Adding [${i}] package to install list..."
        fi;;
      "dnsutils")
        if [[ ! $(which ${i} > /dev/null) && ! -f "/var/lib/my_packages/${i}" ]]
        then
          PKG="${PKG} ${i}"
          echo_logger I "Adding [${i}] package to install list..."
        else
          # Since nsupdate is already installed, we need to make sure it isn't the version that has the mem.c assert bug with ddclient - unless proven otherwise, we don't mind it being the latest version
          if [[ ${GETDNSver} != ${DNSver} ]]
          then
            PKG="${PKG} ${i}"
            echo_logger I "Adding [${i}] package to install list..."
          fi
        fi;;
      "rfc2136.dynamic.dns")
        if [[ ! -f "/var/lib/my_packages/${i}" || ! Check_RFC2136_Template ]]
        then
          echo_logger I "Adding [${i}] package to install list..."
          if ! Install_RFC2136_Support
          then
            echo_logger W "Unable to install [${i}] package."
          else
            try sudo touch /var/lib/my_packages/${i}
            echo_logger I "Package [${i}] installed."
          fi
        fi;;
        *)
        if [[ ! $(which ${i} > /dev/null) && ! -f "/var/lib/my_packages/${i}" ]]
        then
          PKG="${PKG} ${i}"
          echo_logger I "Adding [${i}] package to install list..."
        fi;;
    esac
  done

  if [[ "${PKG}" != '' ]]
  then
    apt_get_Update
    echo_logger I "The following package(s) will be installed: [${PKG}]..."
    for this_pkg in ${PKG}; do
      echo_logger I "Installing [${this_pkg}] package."
      if [[ ! -f "/var/lib/my_packages/${this_pkg}" ]]
      then
        if ! try sudo apt-get -f -qq -y install ${this_pkg}
        then
          echo_logger W "Unable to install package [${this_pkg}]."
          if [[ ${this_pkg} = "dnsutils" ]]
          then
            echo_logger W "[${this_pkg}] provides the fixed version of [/usr/bin/nsupdate]; in order for [ddclient] to update the DDNS IP address, this problem must be fixed."
            if yesno -y "Would you like to retry installing the package?  [Y/n] "
            then
              if ! try sudo apt-get -f -qq -y install ${this_pkg}
              then
                echo_logger E "Unable to install [${this_pkg}] on the second attempt; you must run [sudo apt-get -f install dnsutils] after the script completes."
              fi
            else
              echo_logger W "In order for DDNS to work correctly, you must run [sudo apt-get -f install dnsutils] after the script completes."
            fi
          fi
        else
          try sudo touch /var/lib/my_packages/${this_pkg}
          echo_logger S "[${this_pkg}] package installed."
        fi
      else
        echo_logger I "[${this_pkg}] package already installed."
      fi
    done
  echo_logger I "Installation of [${PKG}] completed."
  fi
}

# Function to capture hostname
Set_Hostname ()
{
  printf "Hostname can only consist of alphanumeric characters and '-'.\n"
  while true
    do
      read -p " Enter host name [$HNAME]: " HNAME
      # Check validity of hostname
      if [[ "${HNAME}" =~ ^[a-zA-Z]((\-){0,1}[a-zA-Z0-9]+)*$ && "${HNAME}" != "ubnt" ]]
      then
        # Force it to lowercase (only works in Bash v4+)
        HNAME="${HNAME,,}"
        break
      else
        echo "[$HNAME] is an invalid hostname, please try again!"
      fi
    done
}

# Make sure we have a valid hostname, cannot proceed with the factory default 'ubnt'
Check_Set_Host ()
{
  print_line \*
  if [[ "${HNAME}" = "ubnt" ]]
  then
    HNAME=''
    echo_logger I "Hostname not set, current factory default: [$HNAME]"
    printf "You have not set the system hostname, it must be correct before proceeding.\n"
    Set_Hostname
    printf "System hostname will be [$HNAME]. "
    if yesno -y "Is that correct? [Y/n] "
    then
      printf "Setting system hostname to [$HNAME]\n"
    else
      # Attempt to capture a typo, etc.
      printf "Enter the correct hostname now: "
      Set_Hostname
    fi

    echo_logger I "Committing system hostname [$HNAME] to router configuration"
    try begin
    try set system host-name ${HNAME}
    try commit || echo_logger F "Unable to commit system hostname [$HNAME] to router configuration"
    echo_logger I "Saving router configuration"
    try save || echo_logger F "Unable to save router configuration"
    try end
  fi
}

# Set up the public/private key pair (both are required by nsupdate)
Set_Up_Keys ()
{
KPFILE="${HNAME}.ddnskeypair.tar.gz"
SRC_DIR="/config/user-data/KH_Source"

  print_line \*
  echo_logger I "Setting up nsupdate authentication keys..."
  if [[ ! -d "/config/auth/keys" ]]
  then
    if ! try sudo install -d -o root -g root -m 0750  /config/auth/keys/
    then
      echo_logger FE "Could not create [/config/auth/keys/] directory!"
      exit 1
    fi
  fi

  # Let's see if this router already has keys because it was set up using the original DDNS method
  if [[ -f "/config/user-data/keys/${HNAME}.private" && -f "/config/user-data/keys/${HNAME}.private" ]]
  then
    echo_logger I "Found keys for [$HNAME], transferring them to [/config/auth/keys/]..."
    if try sudo install -o root -g root -m 0440 /config/user-data/keys/${HNAME}.* /config/auth/keys/
    then
      echo_logger S "Keys transferred; removing old key directory [/config/user-data/keys/]..."
      if ! try sudo rm -rf /config/user-data/keys/
      then
        echo_logger W "Unable to remove [/config/user-data/keys/]."
      fi
    else
      echo_logger W "Unable to transfer keys, using fallback method to obtain a new keypair for [$HNAME]..."
    fi
  fi

  if [[ -e "/config/auth/keys/${HNAME}.private" && -e "/config/auth/keys/${HNAME}.key" ]]
  then
    # keys are already saved locally; use them
    echo_logger I "Using [/config/auth/keys/${HNAME}.*] keypair as they are already downloaded..."
  else
    # first-time setup; need to download from server
    echo_logger I "Downloading the [${KPFILE}] keypair file..."
# Since the TSD server was moved to Woodburn, port 443 is no longer accessible
#     if ! try curl -f -s -u tsdinstall -o "${KPFILE}" "https://www2.orbc2.org/kh/keypair/${KPFILE}"
    if ! try [[ -f ${SRC_DIR}/${KPFILE} ]]
    then
      echo_logger FE "Unable to locate ${KPFILE}. Exiting."
      exit 1
    fi

    echo_logger I "Extracting keypair from [${KPFILE}]..."
    if ! try sudo tar zxf "${SRC_DIR}/${KPFILE}"
    then
      echo_logger FE "Unable to extract keypair from [${SRC_DIR}/${KPFILE}]. Exiting."
      exit 1
    fi

    echo_logger I "Installing keypair to [/config/auth/keys/]..."
    if ! try sudo install -o root -g root -m 0440 keys/* /config/auth/keys/
    then
      echo_logger FE "Unable to install the downloaded keypair"
      exit 1
    fi
  fi
  echo_logger S "Keypair correctly installed."
}

Get_WAN_Interface ()
{
IFs=$(/opt/vyatta/sbin/vyatta-interfaces.pl --show=all) # Retrieve all of the interfaces available

  print_line \*
  if [[ ! -z ${WANIF} ]]
  then
    echo_logger I "[${WANIF}] is currently connected to the internet - no need to configure it."
  else
    WANIF=eth1
    echo "Which of these interfaces is connected to the WAN (Internet): [${IFs}] - (usually it is [eth1] or [pppoe0])"
    if yesno -y "Is it [${WANIF}]? [Y/n] "
    then
      WAN=${WANIF}
    else
      BADIF=1
      while [ ${BADIF} -eq 1 ]; do
        read -p "Please enter your WAN (Internet) device: " WAN
        # Now let's validate the operator's choice
        IFSTAT=$(/opt/vyatta/sbin/vyatta-interfaces.pl --dev=${WAN} --warn 2>&1)
        if [[ "${IFSTAT}" = "interface ${WAN} does not exist on system" ]]
        then
          echo_logger W "the interface [${WAN}] does not exist on this system, please use one of these: [${IFs}]"
        else
          BADIF=0
        fi
      done
    fi
  fi
}

# Since this router may also have the original method of updating DDNS, let's go ahead
# and remove it, to prevent conflicts
Remove_Original_DDNS ()
{
local DDNS_CONFIG_DIR="/config/user-data/ddns-scripts"
ERROR=1

  echo_logger I "Checking for and removing original DDNS configuration if it exists..."

  # Remove /config/user-data/ddns-scripts if it exists
  if [[ -d ${DDNS_CONFIG_DIR} ]]
  then
    echo_logger I "Removing directory [$DDNS_CONFIG_DIR]..."
    try sudo rm -rf ${DDNS_CONFIG_DIR} && ERROR=0

    for TYPE in pppoe dhcp
    do
      if [[ ${TYPE} = "pppoe" ]]
      then
        TARGETDIR="/etc/ppp/ip-up.d"
      else
        TARGETDIR="/etc/dhcp3/dhclient-exit-hooks.d"
      fi

      if [[ -e "${TARGETDIR}/zz-orbc2-ddns-${TYPE}" ]]
      then
        try sudo rm -f "${TARGETDIR}/zz-orbc2-ddns-${TYPE}"
      fi
    done

    if [[ -e /config/scripts/post-config.d/orbc2-ddns ]]
    then
      echo_logger I "Removing [/config/scripts/post-config.d/orbc2-ddns]..."
      try sudo rm -f /config/scripts/post-config.d/orbc2-ddns
    fi

    if [[ ${ERROR} = 0 ]]
    then
      echo_logger S "Original DDNS configuration cleaned up and removed."
    else
      echo_logger W "Problems cleaning up original DDNS."
    fi

  else
    echo_logger I "Original DDNS configuration not found, so nothing to do here."
  fi

  return ${ERROR}
}

# Get the correct WAN facing DDNS interface configured
Set_Up_DDNS ()
{
WAIT=15 # Pause time for ddclient to update the DDNS IP address
ERROR=1
CURRENTIP=$(/sbin/ifconfig ${WANIF} | awk -F"[: ]+" '/inet addr:/ {print $4}')

  if [[ -z ${WANIF} || "$(showddns --show-status)" == "Dynamic DNS not configured" ]]
  then
    Get_WAN_Interface
    Add_RFC2136_Config
  elif [[ "${CURRENTIP}" != "${DDNSIP}" ]]
  then
    Add_RFC2136_Config
  fi

  print_line \*

  # Now let's do a sanity check on the configuration
  if [[ "$(showddns --show-interfaces)" = "${WANIF}" ]]
  then
    echo_logger I "Pausing [${WAIT}] seconds to give ddclient some time to update the DDNS IP address..."
    sleep ${WAIT}
    DDNSIP=$(host ${HNAME:-nohost}.kh.orbc2.org |awk -F"[ ]+" '{print $4}')
    if [[ "${DDNSIP}" != "found:" ]]
    then
      echo_logger I "The DDNS interface [${WANIF}] is successfully configured, current IP is [${CURRENTIP}] and [${HNAME}.kh.orbc2.org] is registered with IP address: [${DDNSIP}]..."
      ERROR=0
    else
      print_line \*
      echo_logger W "DDNS isn't correctly set up, run [show log] and investigate..."
      try showddns --show-status
    fi
  fi

  return ${ERROR}
}

main()
{
  print_line \*
  echo_logger I "${ME}This script will install [*.kh.orbc2.org] dynamic dns (DDNS) support"
  echo

  if yesno -y "Is that OK? [Y/n] "
  then
    print_line \*
    echo_logger I "Starting LDC EdgeOS Router Installer..."
    if [[ -f /var/lib/my_packages/ddns.configured ]]
    then
      try sudo rm /var/lib/my_packages/ddns.configured
    fi
    Check_Version
    case ${?} in              # Upgrade unless we are on the correct version
      0)
        echo_logger I "EdgeOS [${VER}] detected, firmware is compatible."
        Remove_Original_DDNS  # Check for and remove router's previous original method DDNS
        if Check_If_Factory   # Check and see if we need to install the KH config.boot template
        then
          Install_Config
          Fix_Users
        fi
        Check_Set_Host        # Check and set hostname if it is still defaulted to 'ubnt'
        Set_Up_Keys           # Set up and install keys (persists across EdgeOS upgrades)
        Set_Persistence       # Persist packages and DDNS configuration across upgrades
        Add_Pkgs              # Check for existing packages and install any that aren't
        Add_HW_Offload        # Add EdgeOS hw offload options, for enhanced pkt throughput
        Add_Port_Forward      # EdgeOS v1.2.0 didn't have Port Forwarding, ensure it is added
        Add_DHCP_Host_Disable # EdgeOS v1.2.0 didn't have this option, add it
        if Set_Up_DDNS        # Make sure the WAN interface is configured for DDNS updates
        then
          try sudo touch /var/lib/my_packages/ddns.configured
          exit 0
        else
          exit 1
        fi
        ;;
      1)
        echo_logger FE "EdgeOS [${VER}] detected, [v1.7.0] firmware required, upgrade and re-run ersetup."
        exit 1
        ;;
      2)
        Remove_Original_DDNS  # Check for and remove router's previous original method DDNS
        if Check_If_Factory   # Check and see if we need to install the KH config.boot template
        then
          Install_Config
          Fix_Users
        fi
        Check_Set_Host        # Check and set hostname if it is still defaulted to 'ubnt'
        Set_Up_Keys           # Set up and install keys (persists across EdgeOS upgrades)
        Set_Persistence       # Persist packages and DDNS configuration across upgrades
        if Internet           # Check internet connectivity before we try to download the firmware
        then
          echo_logger I "EdgeOS [${VER}] needs to be upgraded to [v1.7.0]..."
          if Upgrade_Router   # Upgrade the router to v1.7.0
          then
            echo_logger S "OS upgraded to [v1.7.0]; router must be rebooted..."
            echo_logger W "After the router reboots, an automatic post-config script will run to complete the upgrade configuration. Login via ssh as [tsd] or use the web interface [https://192.168.1.1] The only feedback it is working will be to execute: [show log tail] after logging in."
            if yesno -y "We need to reboot the router, is that OK? [Y/n] "
            then
              reboot
            else
              echo_logger W "The router needs to be rebooted before continuing!"
              echo_logger I "After rebooting, an automatic post-config script will run to complete the upgrade configuration. Login via ssh as [tsd] or use the web interface [https://192.168.1.1] The only feedback it is working will be to execute: [show log tail] after logging in."
            fi
          else
            echo_logger FE "Unable to upgrade to EdgeOS [v1.7.0] firmware. Exiting."
            exit 1
          fi
        else
          Init_eth1_Firewall
          if Internet
          then
            echo_logger S "Connected to the Internet."
          fi
        fi
        ;;
      *)
        echo_logger FE "This shouldn't happen, so we're exiting just in case!"
        exit 1
    esac
  else
    echo_logger I "LDC EdgeOS Router [*.kh.orbc2.org] dynamic dns configuration aborted!"
    exit 1
  fi
}

# This is where we run the script using the above functions
trap atexit exit ${?}

main
