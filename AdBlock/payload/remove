#!/usr/bin/env perl
#
# **** License ****
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# A copy of the GNU General Public License is available as
# '/usr/share/common-licenses/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at `http://www.gnu.org/copyleft/gpl.html'.
# You can also obtain it by writing to the Free Software Foundation,
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# Author: Neil Beadle
# Date:   December 2015
#
# **** End License ****
# Install dnsmasq BLACKLIST and blacklist blocking onto an EdgeMax router
# Use at your own risk
#
use feature qw{switch};
use File::Basename;
use Getopt::Long;
use HTTP::Tiny;
use IPC::Open3;
use lib q{/opt/vyatta/share/perl5/};
use POSIX qw{geteuid};
use strict;
use Sys::Syslog qw(:standard :macros);
use threads;
use URI;
use v5.14;
use Vyatta::Config;
use warnings;

use constant TRUE  => 1;
use constant FALSE => 0;

chomp( my $version = qx{cat version} );
my $cols = qx{tput cols};
my $crsr = {
  off            => qq{\033[?25l},
  on             => qq{\033[?25h},
  clear          => qq{\033[0m},
  reset          => qq{\033[0m},
  bright_green   => qq{\033[92m},
  bright_magenta => qq{\033[95m},
  bright_red     => qq{\033[91m},
};
my $cmdref  = { errors => 0, calls => 0, };
my $program = basename($0);
my $edgeOS  = &is_version();
my $name    = q{dnsmasq blacklist};
my $begin   = q{/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper begin};
my $commit  = q{/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper commit};
my $delete  = q{/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper delete};
my $end     = q{/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper end};
my $save    = q{sudo /opt/vyatta/sbin/vyatta-cfg-cmd-wrapper save};
my $set     = q{/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper set};
my $env_ref = {
  cnf_ext    => q{.conf},
  dnsmasq    => q{/etc/dnsmasq.d},
  no_op      => q{/tmp/.update-dnsmasq.no-op},
  oldconf    => qq{{domai*,hos*,zon*}.blacklist.conf},
  oldscript  => q{update-blacklists-dnsmasq.pl},
  script     => q{update-dnsmasq.pl},
  script_dir => q{/config/scripts},
  templates => q{/opt/vyatta/share/vyatta-cfg/templates/service/dns/forwarding},
};

############################### script runs here ###############################
&main();

# Exit normally
exit 0;
################################################################################

# Process the active (not committed or saved) configuration
sub cfg_actv {
  my $input = shift;

  if ( is_blacklist() ) {
    my $config = new Vyatta::Config;
    my ( $listNodes, $returnValue, $returnValues );

    if ( is_configure() ) {
      $returnValue  = q{returnValue};
      $returnValues = q{returnValues};
      $listNodes    = q{listNodes};
    }
    else {
      $returnValue  = q{returnOrigValue};
      $returnValues = q{returnOrigValues};
      $listNodes    = q{listOrigNodes};
    }

    $config->setLevel(q{service dns forwarding blacklist});
    $input->{'config'}->{'disabled'} = $config->$returnValue(q{disabled})
      // FALSE;

    $input->{'config'}->{'dns_redirect_ip'}
      = $config->$returnValue(q{dns-redirect-ip}) // q{0.0.0.0};

    for my $key ( $config->$returnValues(q{exclude}) ) {
      $input->{'config'}->{'exclude'}->{$key} = 1;
    }

    $input->{'config'}->{'disabled'}
      = $input->{'config'}->{'disabled'} eq q{false} ? FALSE : TRUE;

    for my $area (qw{hosts domains zones}) {
      $config->setLevel(qq{service dns forwarding blacklist $area});
      $input->{'config'}->{$area}->{'dns_redirect_ip'}
        = $config->$returnValue(q{dns-redirect-ip})
        // $input->{'config'}->{'dns_redirect_ip'};

      for my $key ( $config->$returnValues('include') ) {
        $input->{'config'}->{$area}->{'blklst'}->{$key} = 1;
      }

      while ( my ( $key, $value ) = each $input->{'config'}->{'exclude'} ) {
        $input->{'config'}->{$area}->{'exclude'}->{$key} = $value;
      }

      for my $key ( $config->$returnValues(q{exclude}) ) {
        $input->{'config'}->{$area}->{'exclude'}->{$key} = 1;
      }

      if ( !keys %{ $input->{'config'}->{$area}->{'exclude'} } ) {
        $input->{'config'}->{$area}->{'exclude'} = {};
      }

      if ( !keys %{ $input->{'config'}->{'exclude'} } ) {
        $input->{'config'}->{'exclude'} = {};
      }

      for my $source ( $config->$listNodes(q{source}) ) {
        $config->setLevel(
          qq{service dns forwarding blacklist $area source $source});
        @{ $input->{'config'}->{$area}->{'src'}->{$source} }{qw(prefix url)}
          = ( $config->$returnValue('prefix'), $config->$returnValue('url') );
      }
    }
  }
  else {
    log_msg(
      {
        msg_typ => q{error},
        msg_str =>
          qq{[service dns forwarding blacklist is not configured], exiting!},
      }
    );

    return;
  }
  if ( ( !scalar keys %{ $input->{'config'}->{'domains'}->{'src'} } )
    && ( !scalar keys %{ $input->{'config'}->{'hosts'}->{'src'} } )
    && ( !scalar keys %{ $input->{'config'}->{'zones'}->{'src'} } ) )
  {
    log_msg(
      {
        msg_ref => q{error},
        msg_str => qq{At least one domain or host source must be configured},
      }
    );
    return;
  }
  return TRUE;
}

# Remove previous configuration files
sub delete_file {
  my $input = shift;
  my $cmd;

  if ( -f $input->{'file'} ) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str => sprintf q{Deleting file %s},
        $input->{'file'},
      }
    );
    $cmd = qx{sudo rm $input->{'file'} 2>&1};
    qx{$cmd};
    $cmdref->{'calls'}++;
  }

  if ( -f $input->{'file'} ) {
    $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
    log_msg(
      {
        msg_typ => q{warning},
        msg_str => sprintf q{Unable to delete %s},
        $input->{'file'},
      }
    );
    return;
  }
  return TRUE;
}

# Error handler
sub error_handler {
  my $input = shift;
  $cmdref->{'calls'}++;
  $input->{'exit_code'} >> 8 != 0
    ? sub {
    $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $input->{'cmd'};
    return;
    }
    : return TRUE;
}

# Runs the subs to process the blacklist
sub get_blacklist {
  my $dnsmasq_svc = q{/etc/init.d/dnsmasq};
  my $cfg_ref     = {
    disabled         => 0,
    dnsmasq_dir      => q{/etc/dnsmasq.d},
    flag_dom_level   => 5,
    flag_dom_file    => q{/var/log/update-dnsmasq_flagged_domains.cmds},
    domains          => {
      duplicates => 0,
      icount     => 0,
      records    => 0,
      target     => q{address},
      type       => q{domains},
      unique     => 0,
    },
    hosts => {
      duplicates => 0,
      icount     => 0,
      records    => 0,
      target     => q{address},
      type       => q{hosts},
      unique     => 0,
    },
    zones => {
      duplicates => 0,
      icount     => 0,
      records    => 0,
      target     => q{server},
      type       => q{zones},
      unique     => 0,
    },
  };

  # Make sure localhost is always in the exclusions whitelist
  $cfg_ref->{'hosts'}->{'exclude'}->{'localhost'} = 1;

  my $success = get_config( { type => q{active}, config => $cfg_ref } );
  $cmdref->{'calls'}++;

  # Now proceed if blacklist is enabled
  if ($success) {
    my @areas = ();

    # Add areas to process only if they contain sources
    for my $area (qw{domains zones hosts}) {
      push @areas, $area if scalar keys %{ $cfg_ref->{$area}->{'src'} };
    }

    # Process each area
    my $area_count = (@areas);
    for my $area (@areas) {
      my ( $prefix, @threads );
      my $max_thrds = 8;
      my @sources   = keys %{ $cfg_ref->{$area}->{'src'} };
      $cfg_ref->{$area}->{'icount'}
        = scalar keys %{ $cfg_ref->{$area}->{'blklst'} } // 0;
      @{ $cfg_ref->{$area} }{ 'records', 'unique' }
        = @{ $cfg_ref->{$area} }{ 'icount', 'icount' };

      # Remove any files that no longer have configured sources
      my $sources_ref = {
        map {
          my $key = $_;
          qq{$cfg_ref->{'dnsmasq_dir'}/$area.$key.blacklist.conf} => 1;
        } @sources
      };
      my $files_ref = { map { my $key = $_; $key => 1; }
          glob qq{$cfg_ref->{'dnsmasq_dir'}/$area.*blacklist.conf} };

      for my $file ( keys $files_ref ) {
        delete_file( { file => $file } ) if !exists $sources_ref->{$file};
      }

      # write each configured area's includes into individual dnsmasq files
      if ( $cfg_ref->{$area}->{'icount'} > 0 ) {
        my $equals = $area ne q{domains} ? q{=/} : q{=/.};
        write_file(
          {
            data => [
              map {
                my $value = $_;
                sprintf qq{%s%s%s/%s\n}, $cfg_ref->{$area}->{'target'},
                  $equals, $value, $cfg_ref->{$area}->{'dns_redirect_ip'};
                 } sort keys %{ $cfg_ref->{$area}->{'blklst'} }
         ],
            file => qq{$cfg_ref->{'dnsmasq_dir'}/$area.pre-configured.blacklist.conf},
          }
        ) or die sprintf qq{Could not open file: s% $!}, $file;
      }

      for my $source (@sources) {
        my ( $file, $url )
          = @{ $cfg_ref->{$area}->{'src'}->{$source} }{ 'file', 'url' };
        my $uri  = new URI($url);
        my $host = $uri->host;

        # Initialize the source's counters
        @{ $cfg_ref->{$area}->{'src'}->{$source} }
          {qw(duplicates icount records unique)} = ( 0, 0, 0, 0 );

        $prefix
          = $cfg_ref->{$area}->{'src'}->{$source}->{'prefix'} ~~ 'http'
          ? qr{(?:^(?:http:|https:){1}[/]{1,2})}o
          : $cfg_ref->{$area}->{'src'}->{$source}->{'prefix'};

        if ( scalar $url ) {
          log_msg(
            {
              msg_typ => q{info},
              msg_str => sprintf q{Downloading %s blacklist from %s},
              $area, $host,
            }
          );
          push @threads,
            threads->create(
            { context => q{list}, exit => q{thread_only} },
            \&get_url,
            {
              area   => $area,
              host   => $host,
              prefix => $prefix,
              src    => $source,
              url    => $url
            }
            );
        }
        elsif ($file) {    # get file data
          push @threads,
            threads->create( { context => q{list}, exit => q{thread_only} },
            \&get_file, { file => $file, src => $source } );
        }
        sleep 1 while ( scalar threads->list(threads::running) >= $max_thrds );
      }

      for my $thread (@threads) {
        my $data_ref = $thread->join();
        my $rec_count = scalar keys %{ $data_ref->{'data'} } // 0;

        $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }->{'records'}
          += $rec_count;

        if ( exists $data_ref->{'host'} && scalar $rec_count ) {
          log_msg(
            {
              msg_typ => q{info},
              msg_str => sprintf q{%s lines received from: %s },
              $rec_count, $data_ref->{'host'},
            }
          );

          # Now process what we have received from the web host
          $success = process_data(
            {
              area   => $area,
              data   => \%{ $data_ref->{'data'} },
              config => $cfg_ref,
              prefix => $data_ref->{'prefix'},
              src    => $data_ref->{'src'}
            }
          );
          $cmdref->{'calls'}++;
          if ( !$success ) {
            $cmdref->{'fail'}->{ $cmdref->{'errors'}++ }
              = qq{process_data $area $data_ref->{'src'}};
          }

          # Delete $data_ref->{'data'} key and data
          delete $data_ref->{'data'};

          if (
            $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }->{'icount'} > 0 )
          {
            my $equals = $area ne q{domains} ? q{=/} : q{=/.};
            write_file(
              {
                data => [
                  map {
                    my $value = $_;
                    sprintf qq{%s%s%s/%s\n}, $cfg_ref->{$area}->{'target'},
                      $equals, $value, $cfg_ref->{$area}->{'dns_redirect_ip'};
                    } sort keys %{
                    $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }
                      ->{'blklst'}
                    }
                ],
                file => qq{$cfg_ref->{'dnsmasq_dir'}/$area.$data_ref->{'src'}.blacklist.conf};,
              }
            ) or die sprintf qq{Could not open file: s% $!}, $file;


            $cfg_ref->{$area}->{'unique'}
              += scalar keys
              %{ $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }->{'blklst'}
              };
            $cfg_ref->{$area}->{'duplicates'}
              += $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }
              ->{'duplicates'};
            $cfg_ref->{$area}->{'icount'}
              += $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }->{'icount'};
            $cfg_ref->{$area}->{'records'}
              += $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} }
              ->{'records'};

            # Discard the data now its written to file
            delete $cfg_ref->{$area}->{'src'}->{ $data_ref->{'src'} };
          }
          else {
            log_msg(
              {
                msg_typ => q{warning},
                msg_str => qq{Zero records processed from $data_ref->{'src'}!},
              }
            );
          }
        }
      }

      log_msg(
        {
          msg_typ => q{info},
          msg_str => sprintf
            q{Processed %s %s (%s discarded) from %s records (%s orig.)%s},
          @{ $cfg_ref->{$area} }{qw(unique type duplicates icount records)},
          qq{\n},
        }
      );

      my @flagged_domains = ();

 # Now lets report the domains that were seen more than $cfg->{'flag_dom_level'}
      for my $key (
        sort {
          $cfg_ref->{'hosts'}->{'exclude'}->{$b}
            <=> $cfg_ref->{'hosts'}->{'exclude'}->{$a}
        } keys %{ $cfg_ref->{'hosts'}->{'exclude'} }
        )
      {
        my $value = $cfg_ref->{'hosts'}->{'exclude'}->{$key};
        if ( $value >= $cfg_ref->{'flag_dom_level'} && length $key > 5 ) {
          log_msg(
            {
              msg_typ => q{info},
              msg_str => sprintf qq{$area blacklisted: domain %s %s times},
              $key, $value,
            }
          );
          push @flagged_domains, qq{$key # $value times};
        }
      }

      if (@flagged_domains) {
        $cmdref->{'calls'}++;
        $success = write_file(
          {
            data => [
              map {
                my $value = $_;
                sprintf
                  qq{set service dns forwarding blacklist domains include %s\n},
                  $value;
              } @flagged_domains
            ],
            file => $cfg_ref->{'flag_dom_file'},
          }
        );
        if ( !$success ) {
          $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = qq{write_file $file};
        }

        log_msg(
          {
            msg_typ => q{info},
            msg_str => qq{Flagged domains command set written to:\n $file},
          }
        );
      }

      $area_count--;
      say q{} if ( $area_count == 1 );    # print a final line feed
    }
  }
  elsif ( $cfg_ref->{'disabled'} ) {
    for my $file (
      glob qq{$cfg_ref->{'dnsmasq_dir'}/{domains,hosts,zones}*blacklist.conf} )
    {
      delete_file( { file => $file } );
    }
  }
  else {
    $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = qq{get_blacklist};
  }

  # Select the appropriate dnsmasq restart for CLI configure or bash shell
  my $cmd
    = is_configure()
    ? q{sudo /opt/vyatta/sbin/vyatta-dns-forwarding.pl --update-dnsforwarding > /dev/null 2>1&}
    : qq{sudo $dnsmasq_svc force-reload > /dev/null 2>1&};

  # Clean up the status line
  print $crsr->{'off'}, qq{\r}, qq{ } x $cols, qq{\r};

  log_msg(
    { msg_typ => q{info}, msg_str => q{Reloading dnsmasq configuration...}, } );

  # Reload updated dnsmasq conf address redirection files
  qx{$cmd};
  if ( !error_handler( { exit_code => $?, cmd => $cmd } ) ) {
    log_msg(
      {
        msg_typ => q{error},
        msg_str => q{Reloading dnsmasq configuration failed!},
      }
    );
  }

  # Finish with a linefeed if '-v' is selected
  say q{};
}

# Determine which type of configuration to get (default, active or saved)
sub get_config {
  my $input = shift;

  given ( $input->{'type'} ) {
    when (/active/) { return cfg_actv( { config => $input->{'config'} } ); }
    when (/file/) { return cfg_file( { config => $input->{'config'} } ); }
  }

  return;
}

# Get lists from web servers
sub get_url {
  my $input = shift;
  my $ua    = HTTP::Tiny->new;
  $ua->agent(
    q{Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56}
  );

#   $ua->timeout(60);
  $input->{'prefix'} =~ s/^["](?<UNCMT>.*)["]$/$+{UNCMT}/g;
  my $re = {
    REJECT => qr{^#|^$|^\n}o,
    SELECT => qr{^$input->{'prefix'}.*$}o,
    SPLIT  => qr{\R|<br \/>}oms,
  };

  my $get = $ua->get( $input->{'url'} );

  if ( $get->{'success'} ) {
    $input->{'data'} = {
      map { my $key = $_; lc($key) => 1 }
        grep { $_ =~ /$re->{SELECT}/ } split /$re->{SPLIT}/,
      $get->{'content'}
    };
    return $input;
  }
  else {
    $input->{'data'} = {};
    return $input;
  }
}

# Check to see if blacklist is configured
sub is_blacklist {
  my $config = new Vyatta::Config;

  $config->setLevel(q{service dns forwarding});
  my $blklst_exists
    = is_configure()
    ? $config->exists(q{blacklist})
    : $config->existsOrig(q{blacklist});

  defined $blklst_exists ? return TRUE : return;
}

# check version and set up environment
sub is_build {

  # v1.2.0: build 4574253
  # v1.4.1: build 4648309
  # v1.5.0: build 4677648
  # v1.6.0: build 4716006
  # v1.7.0: build 4783374

  if ( $edgeOS->{'build'} >= 4783374 )    # script tested on os v1.7.0 & above
  {
    return TRUE;
  }
  elsif ( $edgeOS->{'build'} < 4783374 )    # os must be upgraded
  {
    return;
  }
}

# Check to see if we are being run under configure
sub is_configure {
  my $cmd = qq{/bin/cli-shell-api inSession};
  qx{$cmd};
  error_handler( { exit_code => $?, cmd => $cmd } ) ? return TRUE : return;
}

# Make sure script runs as root
sub is_sudo {
  return TRUE if geteuid() == 0;
  return;
}

# get EdgeOS version
sub is_version {
  my ( $build, $version ) = ( q{UNKNOWN BUILD}, q{UNKNOWN VERSION} );
  my $cmd = qq{cat /opt/vyatta/etc/version};
  chomp( my $edgeOS = qx{$cmd} );

  if ( error_handler( { exit_code => $?, cmd => $cmd } ) ) {
    if ( $edgeOS =~ s{^Version:\s*(?<VERSION>.*)$}{$+{VERSION}}xms ) {
      my @ver = split /\./, $edgeOS;
      $version = join ".", @ver[ 0, 1, 2 ];
      $build = $ver[3];
    }
  }
  return { version => $version, build => $build };
}

# Log and print
sub log_msg {
  my $msg_ref = shift;
  my $log_msg = {
    alert    => LOG_ALERT,
    critical => LOG_CRIT,
    debug    => LOG_DEBUG,
    error    => LOG_ERR,
    info     => LOG_INFO,
    warning  => LOG_WARNING,
  };

  return unless ( length $msg_ref->{'msg_typ'} . $msg_ref->{'msg_str'} > 2 );

  syslog( $log_msg->{ $msg_ref->{'msg_typ'} }, $msg_ref->{'msg_str'} );

  if ( $msg_ref->{'msg_typ'} eq q{info} ) {
    say qq{$msg_ref->{'msg_typ'}: $msg_ref->{'msg_str'}};
  }
  else {
    say STDERR qq{$msg_ref->{'msg_typ'}: $msg_ref->{'msg_str'}};
  }

  return TRUE;
}

sub main {

  # Exit if we're not root/sudo
  if ( is_sudo() ) {
    say qq{$name $program must be executed as the admin user - not root} . q{!};
    exit 1;
  }

  # Start logging
  my $log_name = qq{$program: dnsmasq blacklist $version};
  openlog( qq{$log_name}, q{}, LOG_USER );

  log_msg(
    {
      msg_typ => q{info},
      msg_str => qq{---+++ $name $program $version +++--- },
    }
  );

  given ($program) {
    when (m/setup/) {
      if ( is_build() ) {
        log_msg(
          {
            msg_typ => q{info},
            msg_str =>
              qq{Installing $name version $version blocking dnsmasq support...},
          }
        );
        if ( setup() ) {
          log_msg(
            {
              msg_typ => q{info},
              msg_str => qq{$name version $version installation successful...},
            }
          );
        }
        else {
          for my $key ( sort keys %{ $cmdref->{'fail'} } ) {
            log_msg(
              {
                msg_typ => q{error},
                msg_str => qq{$cmdref->{'fail'}->{$key} failed} . q{!},
              }
            );
          }
          log_msg(
            {
              msg_typ => q{error},
              msg_str => qq{$name version $version installation failed} . q{!}
                . qq{\nReview /var/log/messages\n}
                . qq{$cmdref->{'errors'}/$cmdref->{'errors'} calls failed},
            }
          );
          exit 1;
        }
      }
      else {
        log_msg(
          {
            msg_typ => q{error},
            msg_str =>
              qq{Edgemax $edgeOS->{'version'} is not supported, upgrade!}
              . q{!},
          }
        );
        exit 1;
      }
    }
    when (m/remove/) {
      if ( remove() ) {
        log_msg(
          {
            msg_typ => q{info},
            msg_str => qq{$name version $version removal successful...},
          }
        );
      }
      else {
        for my $key ( sort keys %{ $cmdref->{'fail'} } ) {
          log_msg(
            {
              msg_typ => q{error},
              msg_str => qq{$cmdref->{'fail'}->{$key} failed} . q{!},
            }
          );
        }
        log_msg(
          {
            msg_typ => q{error},
            msg_str => qq{$name version $version removal failed} . q{!}
              . qq{\nReview /var/log/messages\n}
              . qq{$cmdref->{'errors'}/$cmdref->{'errors'} calls failed},
          }
        );
        exit 1;
      }
    }
  }

  print $crsr->{'on'};

  closelog();
  exit $cmdref->{'errors'} ? 1 : 0;
}

# Crunch the data and throw out anything we don't need
sub process_data {
  my $input = shift;
  my $re    = {
    FQDOMN =>
      qr{(\b(?:(?![.]|-)[\w-]{1,63}(?<!-)[.]{1})+(?:[a-zA-Z]{2,63})\b)}o,
    LSPACE => qr{\A\s+}oms,
    RSPACE => qr{\s+\z}oms,
    PREFIX => qr{\A $input->{'prefix'} }xoms,
    SUFFIX => qr{(?:#.*\z|\{.*\z|[/[].*\z)}oms,
  };

  # Clear the status lines
  print $crsr->{'off'}, qq{\r}, qq{ } x $cols, qq{\r};

# Process the lines we've been given
LINE:
  for my $line ( keys %{ $input->{'data'} } ) {
    next LINE if $line eq q{} || !defined $line;
    $line =~ s/$re->{PREFIX}//;
    $line =~ s/$re->{SUFFIX}//;
    $line =~ s/$re->{LSPACE}//;
    $line =~ s/$re->{RSPACE}//;

    # Get all of the FQDNs or domains in the line
    my @elements = $line =~ m/$re->{FQDOMN}/gc;
    next LINE if !scalar @elements;

    # Individually pull 1 to N FQDNs or domains from @elements
    for my $element (@elements) {

      # Break it down into it components
      my @domain = split /[.]/, $element;

      # Create an array of all the subdomains
      my @keys;
      for ( 2 .. @domain ) {
        push @keys, join q{.}, @domain;
        shift @domain;
      }

      # Have we seen this key before?
      my $key_exists = FALSE;
      for my $key (@keys) {
        if (
          exists $input->{'config'}->{ $input->{'area'} }->{'exclude'}->{$key} )
        {
          $key_exists = TRUE;
          $input->{'config'}->{ $input->{'area'} }->{'exclude'}->{$key}++;
        }
      }

      # Now add the key, convert to .domain.tld if only two elements
      if ( !$key_exists ) {
        $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
          ->{'blklst'}->{$element} = 1;
      }
      else {
        $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
          ->{'duplicates'}++;
      }

      # Add to the exclude list, so the next source doesn't duplicate values
      @{ $input->{'config'}->{ $input->{'area'} }->{'exclude'} }{$element} = 1;
    }

    $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
      ->{'icount'} += scalar @elements;

    printf
      qq{$crsr->{'off'}%s: $crsr->{'bright_green'}%s$crsr->{'reset'} %s processed, ($crsr->{'bright_red'}%s$crsr->{'reset'} discarded) from $crsr->{'bright_magenta'}%s$crsr->{'reset'} lines\r},
      $input->{'src'},
      $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
      ->{'icount'}, $input->{'config'}->{ $input->{'area'} }->{'type'},
      @{ $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
      }{ 'duplicates', 'records' };
  }

  if (
    scalar $input->{'config'}->{ $input->{'area'} }->{'src'}
    ->{ $input->{'src'} }->{'icount'} )
  {
    log_msg(
      {
        msg_typ => q{info},
        msg_str => sprintf
          qq{%s: %s %s processed, (%s duplicates) from %s lines\r},
        $input->{'src'},
        $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
          ->{'icount'},
        $input->{'config'}->{ $input->{'area'} }->{'type'},
        @{
          $input->{'config'}->{ $input->{'area'} }->{'src'}->{ $input->{'src'} }
        }{ 'duplicates', 'records' },
      }
    );
    return TRUE;
  }
  return;
}

# Remove blacklist support
sub remove {

  log_msg(
    {
      msg_typ => q{info},
      msg_str =>
        qq{Removing dnsmasq blacklist 'no op' file $env_ref->{'no_op'}},
    }
  );

  # Remove the no op file
  my $cmd = qq{sudo rm $env_ref->{'no_op'} 2>&1};
  qx{$cmd};
  $cmdref->{'calls'}++;

  if ( -f qq{$env_ref->{'no_op'}} ) {
    $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Could not remove dnsmasq blacklist 'no op' file $env_ref->{'no_op'}},
      }
    );
  }

  my @directory = glob qq{$env_ref->{'dnsmasq'}/$env_ref->{'oldconf'}};

  if (@directory) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Removing dnsmasq blacklist files from directory: $env_ref->{'dnsmasq'}/},
      }
    );

    for my $file (@directory) {
      if ( -f $file ) {
        log_msg(
          { msg_typ => q{info}, msg_str => q{Removing } . basename($file), } );

        qx{sudo rm $file 2>&1};
        $cmdref->{'calls'}++;

        if ( -f $file ) {
          $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = qq{Delete $file};

          log_msg(
            {
              msg_typ => q{error},
              msg_str => q{Unable to remove } . basename($file),
            }
          );
        }
      }
    }
  }

  if ( -f qq{$env_ref->{script_dir}/$env_ref->{'script'}} ) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Removing $name script $env_ref->{script_dir}/$env_ref->{'script'}},
      }
    );

    $cmd = qq{sudo rm $env_ref->{script_dir}/$env_ref->{'script'} 2>&1};
    qx{$cmd};
    $cmdref->{'calls'}++;

    if ( -f qq{$env_ref->{script_dir}/$env_ref->{'script'}} ) {
      $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
      log_msg(
        {
          msg_typ => q{error},
          msg_str =>
            qq{unable to remove $env_ref->{script_dir}/$env_ref->{'script'}},
        }
      );
    }
  }

  if ( -f qq{$env_ref->{script_dir}/$env_ref->{'oldscript'}} ) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Removing $name $env_ref->{'oldscript'} from $env_ref->{script_dir}/},
      }
    );

    $cmd = qq{sudo rm $env_ref->{script_dir}/$env_ref->{'oldscript'} 2>&1};
    qx{$cmd};
    $cmdref->{'calls'}++;

    if ( -f qq{$env_ref->{script_dir}/$env_ref->{'oldscript'}} ) {
      $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
      log_msg(
        {
          msg_typ => q{error},
          msg_str =>
            qq{Unable to remove $name $env_ref->{'oldscript'} from $env_ref->{script_dir}/},
        }
      );
    }
  }

  log_msg(
    {
      msg_typ => q{info},
      msg_str => qq{Removing $name sources and task scheduler entries...},
    }
  );

  my @commands = (
    qq{$begin;},
    qq{$delete service dns forwarding blacklist;},
    qq{$delete system task-scheduler task update_blacklists;},
    qq{$commit;},
    qq{$save;},
    qq{$end;},
  );

# Now run configure and set up the blacklist configuration - capture any
# errors in the log
  my $in = q{};
  my $pid = open3 $in, \*CMD_OUT, \*CMD_ERR, qq{/bin/bash @commands};
  while ( my $cli_out = <CMD_OUT> ) {
    $cmdref->{'calls'}++;
    if ( !$cli_out
      =~ m/The specified configuration node is not valid\n|Delete failed\n/ )
    {
      if ( $cli_out =~ m/aborted|error|failed|failure/ ) {
        $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cli_out;
        log_msg( { msg_typ => q{error}, msg_str => $cli_out, } );
      }
      else {
        print $cli_out unless $cli_out =~ m/Nothing to delete/;
      }
    }
  }
  while ( my $cli_err = <CMD_ERR> ) {
    $cmdref->{'calls'}++;
    if ( !$cli_err
      =~ m/The specified configuration node is not valid\n|Delete failed\n/ )
    {
      if ( $cli_err =~ m/aborted|error|failed|failure|not valid/ ) {
        $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cli_err;
        log_msg( { msg_typ => q{error}, msg_str => $cli_err, } );
      }
      else {
        print $cli_err unless $cli_err =~ m/Nothing to delete/;
      }
    }
  }
  waitpid $pid, 0;

  if ( -d qq{$env_ref->{'templates'}/blacklist/} ) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str => qq{Removing $name configuration templates...},
      }
    );

    $cmd = qq{sudo rm -rf "$env_ref->{'templates'}/blacklist/" 2>&1};
    qx{$cmd};
    $cmdref->{'calls'}++;

    if ( -d qq{$env_ref->{'templates'}/blacklist/} ) {
      $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
      log_msg(
        {
          msg_typ => q{error},
          msg_str => qq{Unable to remove $name configuration templates...},
        }
      );
    }
  }

  $cmd = qq{sudo service dnsmasq restart 2>&1};
  qx{$cmd};
  log_msg(
    {
      msg_typ => q{error},
      msg_str =>
        q{dnsmasq service did not successfully restart, investigate and resolve!},
    }
  ) if !error_handler( { exit_code => $?, cmd => $cmd } );

  !$cmdref->{'errors'} ? return TRUE : return;
}

# Install blacklist support
sub setup {
  my $cmd;

  # Create a no op file to stop the CLI automatically running update-dnsmasq.pl
  open my $NO_OP, q{>}, qq{$env_ref->{'no_op'}};
  close $NO_OP;

  my @directory = glob qq{$env_ref->{'dnsmasq'}/$env_ref->{'oldconf'}};

  if (@directory) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Removing previous version blacklist files from directory: $env_ref->{'dnsmasq'}/},
      }
    );

    for my $file (@directory) {
      if ( -f $file ) {
        log_msg(
          { msg_typ => q{info}, msg_str => q{Removing } . basename($file), } );

        $cmd = qq{sudo rm $file 2>&1};
        qx{$cmd};
        $cmdref->{'calls'}++;

        if ( -f $file ) {
          $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
          log_msg(
            {
              msg_typ => q{error},
              msg_str => q{unable to remove previous version file }
                . basename($file),
            }
          );
        }
      }
    }
  }

  if ( -f qq{$env_ref->{script_dir}/$env_ref->{'oldscript'}} ) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Removing $name $env_ref->{'oldscript'} from $env_ref->{script_dir}/},
      }
    );

    $cmd = qq{sudo rm $env_ref->{script_dir}/$env_ref->{'oldscript'} 2>&1};
    qx{$cmd};
    $cmdref->{'calls'}++;

    if ( -f qq{$env_ref->{script_dir}/$env_ref->{'oldscript'}} ) {
      $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
      log_msg(
        {
          msg_typ => q{error},
          msg_str =>
            qq{Unable to remove $name $env_ref->{'oldscript'} from $env_ref->{script_dir}/},
        }
      );
    }
  }

  if ( !-d $env_ref->{'script_dir'} ) {
    log_msg(
      {
        msg_typ => q{info},
        msg_str => qq{Creating $name script $env_ref->{'script_dir'}},
      }
    );

    $cmd
      = qq{sudo install -d -o root -g root -m 0755 $env_ref->{'script_dir'} 2>&1};
    qx{$cmd};

    log_msg(
      {
        msg_typ => q{error},
        msg_str => qq{Unable to create $name script $env_ref->{'script_dir'}},
      }
    ) if !error_handler( { exit_code => $?, cmd => $cmd } );
  }

  log_msg(
    {
      msg_typ => q{info},
      msg_str =>
        qq{Installing $name $env_ref->{'script'} script to $env_ref->{'script_dir'}/},
    }
  );

  $cmd
    = qq{sudo install -o root -g root -m 0755 $env_ref->{'script'} "$env_ref->{script_dir}/$env_ref->{'script'}" 2>&1};
  qx{$cmd};

  log_msg(
    {
      msg_typ => q{error},
      msg_str =>
        qq{unable to install $name $env_ref->{'script'} script to $env_ref->{'script_dir'}/},
    }
  ) if !error_handler( { exit_code => $?, cmd => $cmd } );

  log_msg(
    {
      msg_typ => q{info},
      msg_str => qq{Installing $name configuration templates...},
    }
  );

  $cmd = qq{sudo cp -rf blacklist/ "$env_ref->{'templates'}/" 2>&1};
  qx{$cmd};

  log_msg(
    {
      msg_typ => q{error},
      msg_str =>
        qq{error unable to install $name configuration templates to $env_ref->{'templates'}/blacklist/},
    }
  ) if !error_handler( { exit_code => $?, cmd => $cmd } );

  log_msg(
    {
      msg_typ => q{info},
      msg_str =>
        qq{Creating default $name sources and task scheduler entries...},
    }
  );

  #The standard data set for everyone else
  my @commands = (
    qq{$begin;},
    qq{$delete service dns forwarding blacklist;},
    qq{$delete system task-scheduler task update_blacklists;},
    qq{$set service dns forwarding blacklist disabled false;},
    qq{$set service dns forwarding blacklist dns-redirect-ip '0.0.0.0';},
    qq{$set service dns forwarding blacklist exclude 122.2o7.net;},
    qq{$set service dns forwarding blacklist exclude 1e100.net;},
    qq{$set service dns forwarding blacklist exclude adobedtm.com;},
    qq{$set service dns forwarding blacklist exclude akamai.net;},
    qq{$set service dns forwarding blacklist exclude amazonaws.com;},
    qq{$set service dns forwarding blacklist exclude apple.com;},
    qq{$set service dns forwarding blacklist exclude ask.com;},
    qq{$set service dns forwarding blacklist exclude cdn.visiblemeasures.com;},
    qq{$set service dns forwarding blacklist exclude cloudfront.net;},
    qq{$set service dns forwarding blacklist exclude coremetrics.com;},
    qq{$set service dns forwarding blacklist exclude doubleclick.net;},
    qq{$set service dns forwarding blacklist exclude edgesuite.net;},
    qq{$set service dns forwarding blacklist exclude freedns.afraid.org;},
    qq{$set service dns forwarding blacklist exclude github.com;},
    qq{$set service dns forwarding blacklist exclude githubusercontent.com;},
    qq{$set service dns forwarding blacklist exclude google.com;},
    qq{$set service dns forwarding blacklist exclude googleadservices.com;},
    qq{$set service dns forwarding blacklist exclude googleapis.com;},
    qq{$set service dns forwarding blacklist exclude googleusercontent.com;},
    qq{$set service dns forwarding blacklist exclude gstatic.com;},
    qq{$set service dns forwarding blacklist exclude gvt1.net;},
    qq{$set service dns forwarding blacklist exclude gvt1.com;},
    qq{$set service dns forwarding blacklist exclude hb.disney.go.com;},
    qq{$set service dns forwarding blacklist exclude hulu.com;},
    qq{$set service dns forwarding blacklist exclude msdn.com;},
    qq{$set service dns forwarding blacklist exclude paypal.com;},
    qq{$set service dns forwarding blacklist exclude schema.org;},
    qq{$set service dns forwarding blacklist exclude smacargo.com;},
    qq{$set service dns forwarding blacklist exclude ssl-on9.com;},
    qq{$set service dns forwarding blacklist exclude ssl-on9.net;},
    qq{$set service dns forwarding blacklist exclude static.chartbeat.com;},
    qq{$set service dns forwarding blacklist exclude storage.googleapis.com;},
    qq{$set service dns forwarding blacklist exclude ytimg.com;},
    qq{$set service dns forwarding blacklist domains include adsrvr.org;},
    qq{$set service dns forwarding blacklist domains include adtechus.net;},
    qq{$set service dns forwarding blacklist domains include advertising.com;},
    qq{$set service dns forwarding blacklist domains include centade.com;},
    qq{$set service dns forwarding blacklist domains include doubleclick.net;},
    qq{$set service dns forwarding blacklist domains include free-counter.co.uk;},
    qq{$set service dns forwarding blacklist domains include intellitxt.com;},
    qq{$set service dns forwarding blacklist domains include kiosked.com;},
    qq{$set service dns forwarding blacklist domains source malc0de compress false;},
    qq{$set service dns forwarding blacklist domains source malc0de description 'List of zones serving malicious executables observed by malc0de.com/database/';},
    qq{$set service dns forwarding blacklist domains source malc0de prefix 'zone ';},
    qq{$set service dns forwarding blacklist domains source malc0de url 'http://malc0de.com/bl/ZONES';},
    qq{$set service dns forwarding blacklist hosts include 'beap.gemini.yahoo.com';},
    qq{$set service dns forwarding blacklist hosts source adaway description 'Blocking mobile ad providers and some analytics providers';},
    qq{$set service dns forwarding blacklist hosts source adaway prefix '127.0.0.1 ';},
    qq{$set service dns forwarding blacklist hosts source adaway url 'http://adaway.org/hosts.txt';},
    qq{$set service dns forwarding blacklist hosts source malwaredomainlist description '127.0.0.1 based host and domain list';},
    qq{$set service dns forwarding blacklist hosts source malwaredomainlist prefix '127.0.0.1 ';},
    qq{$set service dns forwarding blacklist hosts source malwaredomainlist url 'http://www.malwaredomainlist.com/hostslist/hosts.txt';},
    qq{$set service dns forwarding blacklist hosts source openphish description 'OpenPhish automatic phishing detection';},
    qq{$set service dns forwarding blacklist hosts source openphish prefix http;},
    qq{$set service dns forwarding blacklist hosts source openphish url 'https://openphish.com/feed.txt';},
    qq{$set service dns forwarding blacklist hosts source someonewhocares description 'Zero based host and domain list';},
    qq{$set service dns forwarding blacklist hosts source someonewhocares prefix 0.0.0.0;},
    qq{$set service dns forwarding blacklist hosts source someonewhocares url 'http://someonewhocares.org/hosts/zero/';},
    qq{$set service dns forwarding blacklist hosts source volkerschatz description 'Ad server blacklists';},
    qq{$set service dns forwarding blacklist hosts source volkerschatz prefix http;},
    qq{$set service dns forwarding blacklist hosts source volkerschatz url 'http://www.volkerschatz.com/net/adpaths';},
    qq{$set service dns forwarding blacklist hosts source winhelp2002 description 'Zero based host and domain list';},
    qq{$set service dns forwarding blacklist hosts source winhelp2002 prefix '0.0.0.0 ';},
    qq{$set service dns forwarding blacklist hosts source winhelp2002 url 'http://winhelp2002.mvps.org/hosts.txt';},
    qq{$set service dns forwarding blacklist hosts source yoyo description 'Fully Qualified Domain Names only - no prefix to strip';},
    qq{$set service dns forwarding blacklist hosts source yoyo prefix '';},
    qq{$set service dns forwarding blacklist hosts source yoyo url 'http://pgl.yoyo.org/as/serverlist.php?hostformat=nohtml&showintro=1&mimetype=plaintext';},
    qq{$set system task-scheduler task update_blacklists executable path /config/scripts/update-dnsmasq.pl;},
    qq{$set system task-scheduler task update_blacklists interval 1d;},
    qq{$commit;},
    qq{$save;},
    qq{$end;},
  );

# Now run configure and set up the blacklist configuration - capture any
# errors in the log
  my $in = q{};
  my $pid = open3 $in, \*CMD_OUT, \*CMD_ERR, qq{@commands};
  while ( my $cli_out = <CMD_OUT> ) {
    $cmdref->{'calls'}++;
    if ( !$cli_out =~ m/The specified configuration node already exists\n/ ) {
      print $cli_out;
      if ( $cli_out =~ m/aborted|error|failed|failure|not valid|Set failed/ ) {
        $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cli_out;
        log_msg( { msg_typ => q{error}, msg_str => $cli_out, } );
      }
    }
  }
  while ( my $cli_err = <CMD_ERR> ) {
    $cmdref->{'calls'}++;
    if ( !$cli_err =~ m/The specified configuration node already exists\n/ ) {
      print $cli_err;
      if ( $cli_err =~ m/aborted|error|failed|failure|not valid|Set failed/ ) {
        $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cli_err;
        log_msg( { msg_typ => q{error}, msg_str => $cli_err, } );
      }
    }
  }
  waitpid $pid, 0;

  get_blacklist();

  log_msg(
    {
      msg_typ => q{info},
      msg_str =>
        qq{Removing dnsmasq blacklist 'no op' file $env_ref->{'no_op'}},
    }
  );

  # Remove the no op file
  $cmd = qq{sudo rm $env_ref->{'no_op'} 2>&1};
  $cmdref->{'calls'}++;
  qx{$cmd};

  error_handler( { exit_code => $?, cmd => $cmd } );

  if ( -f qq{$env_ref->{'no_op'}} ) {
    $cmdref->{'fail'}->{ $cmdref->{'errors'}++ } = $cmd;
    log_msg(
      {
        msg_typ => q{info},
        msg_str =>
          qq{Could not remove dnsmasq blacklist 'no op' file $env_ref->{'no_op'}},
      }
    );
  }
  !$cmdref->{'errors'} ? return TRUE : return;
}

# Write the data to file
sub write_file {
  my $input = shift;

  return if !@{ $input->{'data'} };

  my $cmd
    = qq{sudo touch $input->{'file'}; sudo chmod 0666 $input->{'file'} 2>&1};
  qx{$cmd};
  error_handler( { exit_code => $?, cmd => $cmd } );

  open my $FH, q{>}, $input->{'file'} or return;
  log_msg(
    {
      msg_typ => q{info},
      msg_str => sprintf q{Saving %s},
      basename( $input->{'file'} ),
    }
  );

  print {$FH} @{ $input->{'data'} };

  close $FH;

  $cmd = qx{sudo chmod 0755 $input->{'file'} 2>&1};
  qx{$cmd};
  error_handler( { exit_code => $?, cmd => $cmd } );
  return TRUE;
}
